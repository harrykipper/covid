
to work-distribution
 let with-crowd round (0.13 * count turtles with [age > 22 and age < 67])     ;;13% percent of the workforce are working with crowd
 set crowd-workers n-of with-crowd turtles with [age > 22 and age < 67]
 ask crowd-workers [set crowd-worker? true ] 
 set workers  turtles with [(age > 22) and (age < 67) and (crowd-worker? = false)]
  
 let work-size-band (list [1 4][5 9][10 14][15 49][50 60])   ;;work  size bands, based on Glasgow statistics: https://www.gov.scot/publications/businesses-in-scotland-2019/  Businesses in Scotland: 2019 XLS table 8
 let per-work-size  (list 0.63 0.16 0.07 0.11 0.04)           ;;per of sites within the size band   
 let nm-sites  400 * count turtles with [age > 16 ]  / 10000  ;number of work sites, based on 400 work sites per 10,000 population over 16- based on Glasgow statistics
 let i 0
 set work-place (list )
  foreach (work-size-band) [band ->
     repeat round (nm-sites * item i per-work-size) [
        let tmp-size (item 0 band + random (1 + item 1 band - item 0 band))  
         set work-place insert-item 0 work-place tmp-size
       ] 
     set i i + 1   
    ]
  let total sum work-place
  let working-age count workers     ;;number of workers  
  set work-place map [k -> round (working-age * k / total)] work-place     ;;determning the number of employees in each site based on proportional size of the site
  let y sum work-place - working-age
  if y > 0 [set work-place replace-item 0 work-place (item 0 work-place - y) ]
  output-print  (word "The city has " count turtles " residence, "  length (work-place) " work sites and " (with-crowd + count workers) " employees ")
  
  set-current-plot "work-sites"
  plot-pen-reset  ;; erase what we plotted before
  let maxsize max work-place
  set-plot-x-range 1 (maxsize + 1)  ;; + 1 to make room for the width of the last bar
  set-plot-pen-interval 5
  histogram work-place
    
end

to assign-work-to-agents
  let tmp-workers workers
  let i 1 
  foreach work-place [mysize ->
    let my-workers n-of mysize tmp-workers
    ask my-workers [set my-work i]
    set tmp-workers tmp-workers with [my-work != i] 
    set i i + 1  
  ]
end

to assign-colleagues
  ask turtles with [my-work != 0][
    set wide-colleagues other turtles with [my-work = [my-work] of myself ]     
  ]
 
 let i 1
 let z max [my-work] of turtles 
 repeat z [
    let worker one-of turtles with [my-work = i]
    let group  (turtle-set [wide-colleagues] of worker worker)   
    let group-size ceiling (count group / 4)
    ask group[set my-work-sub random (group-size)] ;;agents are randomly given a group number
    ask group [set close-colleagues other group with [my-work-sub = [my-work-sub] of myself ]]   ;;creating my close-group
    ask group[
      let other-group (turtle-set close-colleagues one-of other group with [my-work-sub != [my-work-sub] of myself ])  ;;adding contacts with one of the other groups
      if other-group != nobody[
        set close-colleagues (turtle-set close-colleagues other-group)
        ask other-group[
          if (member? myself close-colleagues) = false   [
            set close-colleagues (turtle-set close-colleagues myself)]
          ] 
        ]
      ]
    set i i + 1 
  ]  

end

;;wide-colleagues
;; close-colleagues